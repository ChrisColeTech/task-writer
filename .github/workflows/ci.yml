name: 🚀 CI Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  # Backend Testing Job
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: 🔨 Build backend
        working-directory: ./backend
        run: npm run build

      - name: 🧪 Run backend tests
        working-directory: ./backend
        run: npm test -- --coverage --watchAll=false

      - name: 📊 Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Testing Job  
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/app/package.json

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend/app
        run: npm ci

      - name: 🔍 Run frontend linting
        working-directory: ./frontend/app
        run: npm run lint

      - name: 🔨 Build frontend
        working-directory: ./frontend/app
        run: npm run build

      - name: 🧪 Run frontend tests (if available)
        working-directory: ./frontend/app
        run: |
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No frontend tests configured yet"
          fi

  # Multi-Language Framework Detection Tests
  framework-detection-tests:
    name: 🌐 Multi-Language Framework Detection
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        language: [python, rust, dotnet, go, java]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      # Setup language environments for testing
      - name: 🐍 Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🦀 Setup Rust
        if: matrix.language == 'rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: 🔷 Setup .NET
        if: matrix.language == 'dotnet'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 🐹 Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: ☕ Setup Java
        if: matrix.language == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: 🔨 Build backend
        working-directory: ./backend
        run: npm run build

      - name: 🧪 Run framework detection tests for ${{ matrix.language }}
        working-directory: ./backend
        run: npm test -- --testPathPattern=MultiLanguageFrameworkDetection.test.ts --testNamePattern="${{ matrix.language }}" --watchAll=false

  # Cross-Platform Testing
  cross-platform-tests:
    name: 🖥️ Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: 🔨 Build backend
        working-directory: ./backend
        run: npm run build

      - name: 🧪 Run core tests
        working-directory: ./backend
        run: npm test -- --testPathPattern="(FrameworkDetectionService|ScaffoldGeneration|TaskGeneration)" --watchAll=false

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend/app
        run: npm ci

      - name: 🔨 Build everything
        run: |
          cd backend && npm run build
          cd ../frontend/app && npm run build

      - name: 🧪 Run integration tests
        working-directory: ./backend
        run: npm test -- --testPathPattern=integration.test.ts --watchAll=false

  # Security and Quality Checks
  security-checks:
    name: 🔒 Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run security audit (Backend)
        working-directory: ./backend
        run: npm audit --audit-level=high

      - name: 🔍 Run security audit (Frontend)
        working-directory: ./frontend/app
        run: npm audit --audit-level=high

      - name: 📊 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: 🔧 Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Final Status Check
  all-tests-status:
    name: ✅ All Tests Status
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, framework-detection-tests, cross-platform-tests, integration-tests, security-checks]
    if: always()
    
    steps:
      - name: 📊 Check test results
        run: |
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "Framework Detection Tests: ${{ needs.framework-detection-tests.result }}"
          echo "Cross-Platform Tests: ${{ needs.cross-platform-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Checks: ${{ needs.security-checks.result }}"
          
          if [[ "${{ needs.backend-tests.result }}" == "success" && 
                "${{ needs.frontend-tests.result }}" == "success" && 
                "${{ needs.framework-detection-tests.result }}" == "success" && 
                "${{ needs.cross-platform-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.security-checks.result }}" == "success" ]]; then
            echo "🎉 All tests passed!"
            exit 0
          else
            echo "❌ Some tests failed"
            exit 1
          fi