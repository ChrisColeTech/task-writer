/**
 * Script Generation Demo
 * Shows how the scaffold generation service works across platforms and formats
 */

import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
import { ScaffoldGenerationService } from '../../services/ScaffoldGenerationService';
import { createMockDirectoryStructure, cleanupMockDirectory } from '../setup';
import fs from 'fs/promises';
import path from 'path';
import { Platform, ScriptFormat, ScaffoldConfig } from '../../types/scaffoldGeneration';

describe('🔧 Script Generation Architecture Demo', () => {
  let scaffoldService: ScaffoldGenerationService;
  let testDir: string;

  beforeEach(async () => {
    scaffoldService = new ScaffoldGenerationService();
    testDir = createMockDirectoryStructure();
  });

  afterEach(async () => {
    cleanupMockDirectory(testDir);
  });

  describe('🏗️ Template-Based Generation (Not Per-Service)', () => {
    it('should use shared template system for all platforms', async () => {
      console.log('\n🏗️ ARCHITECTURE: Template-Based System');
      console.log('❌ NOT: Separate service per platform');
      console.log('✅ YES: Single service + templates + platform-specific rendering');
      
      // Single service generates for multiple platforms using templates
      const platforms = [Platform.WINDOWS, Platform.LINUX, Platform.MACOS];
      const results = [];

      for (const platform of platforms) {
        const config: ScaffoldConfig = {
          projectName: 'Demo Project',
          platforms: [platform],
          formats: [ScriptFormat.BASH] // Same format, different platforms
        };

        const result = await scaffoldService.generateFromConfig(config);
        results.push({ platform, result });
      }

      console.log('\n📋 Generated Scripts:');
      results.forEach(({ platform, result }) => {
        console.log(`${platform}: ${result.scripts.length} scripts generated`);
        if (result.scripts.length > 0) {
          console.log(`  - Format: ${result.scripts[0].format}`);
          console.log(`  - Executable: ${result.scripts[0].executable}`);
        }
      });

      // All generated by same service instance
      expect(results.length).toBe(3);
    });
  });

  describe('📝 Template System Deep Dive', () => {
    it('should show how templates work for Windows Batch', async () => {
      const config: ScaffoldConfig = {
        projectName: 'Windows Demo',
        platforms: [Platform.WINDOWS],
        formats: [ScriptFormat.BATCH]
      };

      const result = await scaffoldService.generateFromConfig(config);
      
      if (result.scripts.length > 0) {
        const batchScript = result.scripts[0];
        
        console.log('\n📝 Windows Batch Template Structure:');
        console.log('Filename:', batchScript.filename);
        console.log('Platform:', batchScript.platform);
        console.log('Format:', batchScript.format);
        console.log('Executable:', batchScript.executable);
        console.log('\nGenerated Content:');
        console.log('─'.repeat(50));
        console.log(batchScript.content);
        console.log('─'.repeat(50));

        expect(batchScript.content).toContain('@echo off');
        expect(batchScript.content).toContain('Windows Demo');
        expect(batchScript.filename).toMatch(/\.bat$/);
      }
    });

    it('should show how templates work for Linux Bash', async () => {
      const config: ScaffoldConfig = {
        projectName: 'Linux Demo',
        platforms: [Platform.LINUX],
        formats: [ScriptFormat.BASH]
      };

      const result = await scaffoldService.generateFromConfig(config);
      
      if (result.scripts.length > 0) {
        const bashScript = result.scripts[0];
        
        console.log('\n📝 Linux Bash Template Structure:');
        console.log('Filename:', bashScript.filename);
        console.log('Platform:', bashScript.platform);
        console.log('Format:', bashScript.format);
        console.log('Executable:', bashScript.executable);
        console.log('\nGenerated Content:');
        console.log('─'.repeat(50));
        console.log(bashScript.content);
        console.log('─'.repeat(50));

        expect(bashScript.content).toContain('#!/bin/bash');
        expect(bashScript.content).toContain('Linux Demo');
        expect(bashScript.filename).toMatch(/\.sh$/);
      }
    });

    it('should show how templates work for PowerShell', async () => {
      const config: ScaffoldConfig = {
        projectName: 'PowerShell Demo',
        platforms: [Platform.WINDOWS],
        formats: [ScriptFormat.POWERSHELL]
      };

      const result = await scaffoldService.generateFromConfig(config);
      
      if (result.scripts.length > 0) {
        const psScript = result.scripts[0];
        
        console.log('\n📝 PowerShell Template Structure:');
        console.log('Filename:', psScript.filename);
        console.log('Platform:', psScript.platform);
        console.log('Format:', psScript.format);
        console.log('Executable:', psScript.executable);
        console.log('\nGenerated Content:');
        console.log('─'.repeat(50));
        console.log(psScript.content);
        console.log('─'.repeat(50));

        expect(psScript.content).toContain('Write-Host');
        expect(psScript.content).toContain('PowerShell Demo');
        expect(psScript.filename).toMatch(/\.ps1$/);
      }
    });
  });

  describe('🔄 Multi-Format Generation', () => {
    it('should generate multiple script formats for same platform', async () => {
      const config: ScaffoldConfig = {
        projectName: 'Multi-Format Demo',
        platforms: [Platform.WINDOWS],
        formats: [ScriptFormat.BATCH, ScriptFormat.POWERSHELL]
      };

      const result = await scaffoldService.generateFromConfig(config);

      console.log('\n🔄 Multi-Format Generation for Windows:');
      console.log(`Total scripts generated: ${result.scripts.length}`);
      
      result.scripts.forEach((script, index) => {
        console.log(`\nScript ${index + 1}:`);
        console.log(`  Format: ${script.format}`);
        console.log(`  Filename: ${script.filename}`);
        console.log(`  Platform: ${script.platform}`);
        console.log(`  Executable: ${script.executable}`);
      });

      expect(result.scripts.length).toBeGreaterThan(0);
      
      // Should have different formats
      const formats = result.scripts.map(s => s.format);
      expect(new Set(formats).size).toBeGreaterThan(0);
    });
  });

  describe('⚙️ Service Architecture Breakdown', () => {
    it('should demonstrate the service composition pattern', async () => {
      console.log('\n⚙️ SCAFFOLD GENERATION SERVICE ARCHITECTURE:');
      console.log('');
      console.log('┌─────────────────────────────────────────────────┐');
      console.log('│           ScaffoldGenerationService            │');
      console.log('├─────────────────────────────────────────────────┤');
      console.log('│  • Single service handles ALL platforms        │');
      console.log('│  • Uses composition pattern with:              │');
      console.log('│    - FrameworkDetectionService                 │');
      console.log('│    - TaskGenerationService                     │');
      console.log('│    - CommandTranslationService                 │');
      console.log('│  • Template-based script generation            │');
      console.log('│  • Platform-agnostic core logic               │');
      console.log('└─────────────────────────────────────────────────┘');
      console.log('                        │');
      console.log('                        ▼');
      console.log('┌─────────────────────────────────────────────────┐');
      console.log('│              Template System                    │');
      console.log('├─────────────────────────────────────────────────┤');
      console.log('│  Templates (JSON) define:                      │');
      console.log('│  • Platform-specific syntax                    │');
      console.log('│  • File headers/footers                        │');
      console.log('│  • Command separators                          │');
      console.log('│  • Error handling patterns                     │');
      console.log('│  • Variable substitution                       │');
      console.log('└─────────────────────────────────────────────────┘');
      console.log('                        │');
      console.log('                        ▼');
      console.log('┌─────────────────────────────────────────────────┐');
      console.log('│            Generated Scripts                    │');
      console.log('├─────────────────────────────────────────────────┤');
      console.log('│  • .bat (Windows Batch)                        │');
      console.log('│  • .ps1 (PowerShell)                           │');
      console.log('│  • .sh (Bash/Linux/macOS)                      │');
      console.log('│  • .py (Python)                                │');
      console.log('│  • Dockerfile                                  │');
      console.log('│  • Makefile                                    │');
      console.log('│  • And more...                                 │');
      console.log('└─────────────────────────────────────────────────┘');

      // This test is just for documentation - always passes
      expect(true).toBe(true);
    });

    it('should show available formats per platform', async () => {
      const platforms = [Platform.WINDOWS, Platform.LINUX, Platform.MACOS];
      
      console.log('\n📋 Available Script Formats Per Platform:');
      
      for (const platform of platforms) {
        const formats = scaffoldService.getAvailableFormats(platform);
        console.log(`\n${platform.toUpperCase()}:`);
        formats.forEach(format => {
          console.log(`  • ${format}`);
        });
      }

      // Verify all platforms have available formats
      platforms.forEach(platform => {
        const formats = scaffoldService.getAvailableFormats(platform);
        expect(formats.length).toBeGreaterThan(0);
      });
    });
  });

  describe('🎯 Real-World Example: React Project Setup', () => {
    it('should generate setup scripts for React project across platforms', async () => {
      // Create a React project structure
      await fs.writeFile(path.join(testDir, 'package.json'), JSON.stringify({
        name: 'react-demo',
        dependencies: {
          'react': '^18.2.0',
          'react-dom': '^18.2.0'
        },
        devDependencies: {
          'vite': '^4.0.0',
          '@types/react': '^18.0.0'
        },
        scripts: {
          'dev': 'vite',
          'build': 'vite build'
        }
      }, null, 2));

      // Generate scripts for all platforms
      const config: ScaffoldConfig = {
        projectName: 'React Demo App',
        platforms: [Platform.WINDOWS, Platform.LINUX, Platform.MACOS],
        formats: [ScriptFormat.BATCH, ScriptFormat.BASH, ScriptFormat.POWERSHELL]
      };

      const result = await scaffoldService.generateScaffolds(testDir, config);

      console.log('\n🎯 Real-World React Project Setup Scripts:');
      console.log(`Framework detected: ${result.metadata.framework}`);
      console.log(`Total scripts generated: ${result.scripts.length}`);
      console.log(`Platforms covered: ${result.metadata.platforms.join(', ')}`);
      console.log(`Script formats: ${result.metadata.formats.join(', ')}`);

      console.log('\nGenerated Scripts:');
      result.scripts.forEach((script, index) => {
        console.log(`\n${index + 1}. ${script.filename}`);
        console.log(`   Platform: ${script.platform}`);
        console.log(`   Format: ${script.format}`);
        console.log(`   Executable: ${script.executable}`);
        console.log(`   Content preview:`);
        console.log(`   ${script.content.split('\n')[0]}...`);
      });

      expect(result.scripts.length).toBeGreaterThan(0);
      expect(result.metadata.framework).toContain('react');
    });
  });

  describe('💡 Key Insights', () => {
    it('should explain the design benefits', () => {
      console.log('\n💡 DESIGN BENEFITS:');
      console.log('');
      console.log('1. 🏗️  SINGLE RESPONSIBILITY:');
      console.log('   • One service handles script generation');
      console.log('   • Templates handle platform differences');
      console.log('   • Clear separation of concerns');
      console.log('');
      console.log('2. 🔧 EASY TO EXTEND:');
      console.log('   • Add new platform = Add new template');
      console.log('   • Add new format = Add new template');
      console.log('   • No code changes needed');
      console.log('');
      console.log('3. 🎯 CONSISTENT OUTPUT:');
      console.log('   • Same logic for all platforms');
      console.log('   • Uniform error handling');
      console.log('   • Predictable behavior');
      console.log('');
      console.log('4. 🧪 TESTABLE:');
      console.log('   • Mock templates for testing');
      console.log('   • Test logic independent of platforms');
      console.log('   • Validate output across all formats');

      expect(true).toBe(true);
    });
  });
});